# BFS
graph = {'A':['B', 'E', 'C'],
 'B':['A', 'D', 'E'],
 'D':['B', 'E'],
 'E':['A', 'D', 'B'],
 'C':['A', 'F', 'G'],
 'F':['C'],
 'G':['C']
 }
visited = []
queue = []
def bfs(visited, graph, start_node, goal_node):
 visited.append(start_node)
 queue.append(start_node)
 while queue:
 m = queue.pop(0)
 print(m)
 if m == goal_node:
 print("Node is Found !!! ")
 break
 else:
 for n in graph[m]:
 if n not in visited:
 visited.append(n)
 queue.append(n)
print("The BFS Traversal is : ")
bfs(visited, graph, 'A', 'D')
DFS
# graph = {
# '0': ['1','3','4'],
# '1': ['2'],
# '2': [],
# '3': ['5'],
# '4': ['5'],
# '5': []
# }
graph = {'A': ['B', 'C', 'E'],
'B': ['A','D', 'E'],
'C': ['A', 'F', 'G'],
'D': ['B'],
'E': ['A', 'B','D'],
'F': ['C'],
'G': ['C']}
vis = set()
def dfs(vis, graph, node):
 if node not in vis:
 print(node, end=" ")
 vis.add(node)
 for adj in graph[node]:
 dfs(vis, graph, adj) 
print("Following is the Depth-First Search")
dfs(vis, graph, 'A')
visited = []
queue = []
def bfs(visited, graph, node):
 visited.append(node)
 queue.append(node)
 while queue:
 m = queue.pop(0)
 print(m, end=" ")
 for neighbour in graph[m]:
 if neighbour not in visited:
 visited.append(neighbour)
 queue.append(neighbour)
print("\nFollowing is the Breadth-First Search")
bfs(visited, graph, 'A')
